#!/usr/bin/env python3

import os
import argparse
import gobjcreator3
from gobjcreator3.compiler import Compiler
from gobjcreator3.codegen.output import FileOut
from gobjcreator3.codegen.c_code_generator import CCodeGenerator, CGenConfig

parser = argparse.ArgumentParser()
parser.add_argument(
				"goc_file", 
				help="GObjectCreator input file"
				)
parser.add_argument(
				"--version",
				action="version",
				version=gobjcreator3.VERSION
				)
parser.add_argument(
				"--include-dir",
				action="append",
				dest="include_dirs",
				default=[],
				metavar="DIR",
				help="additionally search for includes in directory DIR"
				)
parser.add_argument(
				"--std-include-dir",
				action="append",
				dest="std_include_dirs",
				default=[],
				metavar="DIR",
				help="additionally search for standard includes in directory DIR"
				)
parser.add_argument(
				"--header-comment-file",
				dest="header_comment_file",
				default="",
				metavar="FILE",
				help="generate header comment from content of file FILE"
				)
parser.add_argument(
				"--enable-base-functions",
				action="store_true",
				dest="enable_base_functions",
				help="generate base init and base finalize functions"
				)
parser.add_argument(
				"--enable-constructor",
				action="store_true",
				dest="enable_constructor",
				help="generate constructor function"
				)
parser.add_argument(
				"--enable-setter-getter",
				action="store_true",
				dest="enable_setter_getter",
				help="generate setters and getters for properties"
				)
parser.add_argument(
				"-v", "--verbose",
				action="store_true",
				help="verbose generation output"
				)
parser.add_argument("-d", "--dir",
				default=os.curdir,
				help="directory where files will be generated in"
				)
parser.add_argument("--no-module-dirs",
				action="store_true",
				dest="no_module_dirs",
				help="do NOT generate subdirectories per module"
				)

args = parser.parse_args()

# Compile and generate code:

compiler = Compiler()
for incl_dir in args.include_dirs:
	compiler.add_include_dir(incl_dir)
for std_incl_dir in args.std_include_dirs:
	compiler.add_std_include_dir(std_incl_dir)

model = compiler.compile(args.goc_file)

config = CGenConfig()
config.generate_base_functions = args.enable_base_functions
config.generate_constructor = args.enable_constructor
config.generate_setter_getter = args.enable_setter_getter
config.verbose = args.verbose
config.header_text_file = args.header_comment_file
config.directory_per_module = not args.no_module_dirs

generator = CCodeGenerator(model, args.goc_file, FileOut(args.dir), config) 

generator.generate()

exit(0)