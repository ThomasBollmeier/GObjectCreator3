include	"mytypes.goc3";
include <./glib.goc3>;

module gtk
{

	typedecl Label;
	typedecl Button;

}
	
ginterface Human 
{ 
	eat;
	sleep;
	talk
		<- message: string [const];
	walk
		<- direction: integer;
}

module bio/human 
{
	ginterface Human 
	{
		think
			<- about: any;
	}
}

module company 
{

	ginterface Employee
	{
		cfunc-prefix empl;
	
		get_id 
			-> integer;
		get_salary
			-> double;
		set_salary
			<- salary: double;
	} 
	
	gobject Team {}

}

module demo 
{

	typedecl MyInt;

	gerror Error { FAILURE, NOT_FOUND, INVALID }
	
	genum Status 
	{ 
		WAITING = 100, 
		RUNNING, 
		PAUSED, 
		STOPPED 
	} 
	
	gflags Mode { READ, WRITE, EXECUTE } 

	gobject Person [abstract]
	{
		implements /Human, ../bio/human/Human;
		
		public methods 
		{
			Person // <-- constructor
				<- surname: string;
		
			do_something [abstract]
				-> boolean;
		}
		
		public attributes 
		{
			surname: string;
		}
		
		protected attributes 
		{
			year_of_birth: integer;
		}
	}
	
	genum WorkerStatus { FREE, BUSY, OUT_OF_OFFICE }

	gobject Worker
	{
		
		inherits from Person; // <-- super class
		
		implements company/Employee; // <-- interface
		
		properties 
		{
		
			last-name
			{
				access = initial-write
			}
			
			full-name 
			{
				access = read-only,
				description = 'worker\'s name',
				auto-create
			}
			
			team 
			{
				access = read-only,
				type = object,
				gtype = gtypeof(company/Team)
			}
			
			status 
			{
				access = read-only,
				type = enumeration,
				gtype = gtypeof(WorkerStatus),
				default = WorkerStatus.FREE,
				min = "Hallo Welt",
				max = 42
			}
			
		}
		
		signals 
		{
			contract-signed
				<- employee: company/Employee [const]
				<- user_data: any;
		}
		
		public methods 
		{
			constructor
				<- last_name: string [const]
				<- first_name: string [const]
				<- id: unsigned integer [const]
				<-> error: ref(ref(../glib/GError));
				
			do_something [overridden];
			do_something_else 
				<- what: integer
				-> boolean;
			get_team_members [static]
				-> list(company/Employee);
		} 
		
		private methods
		{
			do_something_secret;
		}
		
		private attributes 
		{
			currentId: unsigned integer [static];
			first_name: string;
			last_name: string;
		}
	
	}
	
}
