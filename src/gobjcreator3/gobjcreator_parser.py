# This file has been generated by Bovinus from a grammar file.
# (See http://bovinus.bollmeier.de for details)
# All changes outside of editable sections will be overwritten.

import bovinus.token as token
import bovinus.grammar as grammar
import bovinus.parser as parser
from bovinus.parser import AstNode

# edit-section init {
# } edit-section-end

class GobjcreatorParser(parser.Parser):

	def __init__(self):
		
		parser.Parser.__init__(self, _GobjcreatorGrammar())
		
		self.enableLineComments('//')
		self.enableBlockComments('/*', '*/')
		self.enableFullBacktracking(True)
		

# ========== Private section ==========

all_token_types = []

LIT = token.Literal.get()
all_token_types.append(LIT)

ID = token.Word('[a-zA-Z_][a-zA-Z0-9_]*')
all_token_types.append(ID)

LBRACE = token.Separator('{', whitespaceAllowed=True, escape=True)
all_token_types.append(LBRACE)

RBRACE = token.Separator('}', whitespaceAllowed=True, escape=True)
all_token_types.append(RBRACE)

KEY_1 = token.Keyword('module', caseSensitive=True)
all_token_types.append(KEY_1)

KEY_2 = token.Keyword('gobject', caseSensitive=True)
all_token_types.append(KEY_2)

class _GobjectRule(grammar.Rule):

	def __init__(self, ident=''):
	
		grammar.Rule.__init__(self, 'gobject', ident)
		
	def expand(self, start, end, context):
		
		start.connect(self._sub_1()).connect(end)
		
	def transform(self, astNode):
		
		# edit-section gobject-transform {
		
		return astNode
		
		# } edit-section-end
		
	def _sub_1(self):
		
		elements = []
		elements.append(self._sub_1_1())
		elements.append(self._sub_1_2())
		elements.append(self._sub_1_3())
		elements.append(self._sub_1_4())
		
		return grammar.Sequence(elements)
		
	def _sub_1_1(self):
		
		return grammar.tokenNode(KEY_2)
		
	def _sub_1_2(self):
		
		return grammar.tokenNode(ID, 'name')
		
	def _sub_1_3(self):
		
		return grammar.tokenNode(LBRACE)
		
	def _sub_1_4(self):
		
		return grammar.tokenNode(RBRACE)
		
class _ModuleRule(grammar.Rule):

	def __init__(self, ident=''):
	
		grammar.Rule.__init__(self, 'module', ident)
		
	def expand(self, start, end, context):
		
		start.connect(self._sub_1()).connect(end)
		
	def transform(self, astNode):
		
		# edit-section module-transform {
		
		return astNode
		
		# } edit-section-end
		
	def _sub_1(self):
		
		elements = []
		elements.append(self._sub_1_1())
		elements.append(self._sub_1_2())
		elements.append(self._sub_1_3())
		elements.append(self._sub_1_4())
		elements.append(self._sub_1_5())
		
		return grammar.Sequence(elements)
		
	def _sub_1_1(self):
		
		return grammar.tokenNode(KEY_1)
		
	def _sub_1_2(self):
		
		return grammar.tokenNode(ID, 'name')
		
	def _sub_1_3(self):
		
		return grammar.tokenNode(LBRACE)
		
	def _sub_1_4(self):
		
		branches = []
		branches.append(self._sub_1_4_1())
		branches.append(self._sub_1_4_2())
		
		return grammar.Fork(branches)
		
	def _sub_1_4_1(self):
		
		return self._sub_1_4_1_1()
		
	def _sub_1_4_1_1(self):
		
		return grammar.zeroToMany(_ModuleRule())
		
	def _sub_1_4_2(self):
		
		return self._sub_1_4_2_1()
		
	def _sub_1_4_2_1(self):
		
		return grammar.zeroToMany(_GobjectRule())
		
	def _sub_1_5(self):
		
		return grammar.tokenNode(RBRACE)
		
class _GobjcreatorGrammar(grammar.Grammar):

	def __init__(self):
	
		grammar.Grammar.__init__(self, all_token_types)
		
	def expand(self, start, end, context):
		
		start.connect(self._sub_1()).connect(end)
		start.connect(self._sub_2()).connect(end)
		
	def transform(self, astNode):
		
		# edit-section gobjcreator-transform {
		
		return astNode
		
		# } edit-section-end
		
	def _sub_1(self):
		
		return self._sub_1_1()
		
	def _sub_1_1(self):
		
		return grammar.zeroToMany(_ModuleRule())
		
	def _sub_2(self):
		
		return self._sub_2_1()
		
	def _sub_2_1(self):
		
		return grammar.zeroToMany(_GobjectRule())
		
