/*
 * ...Copyright/Licensing information...
 */
 
:> if [ not is_empty(class.module) ] then begin
#ifndef __${MODULE_PREFIX}_${CLASS_NAME}_H__
#define __${MODULE_PREFIX}_${CLASS_NAME}_H__
:> else
#ifndef __${CLASS_NAME}_H__
#define __${CLASS_NAME}_H__
:> endif

#include <glib-object.h>

:> if [ not is_empty(class.module) ] then begin
#define ${MODULE_PREFIX}_TYPE_${CLASS_NAME}            (${class_prefix}_get_type ())
#define ${MODULE_PREFIX}_${CLASS_NAME}(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${FullClassName}))
#define ${MODULE_PREFIX}_IS_${CLASS_NAME}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}))
#define ${MODULE_PREFIX}_${CLASS_NAME}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${FullClassName}Class))
#define ${MODULE_PREFIX}_IS_${CLASS_NAME}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}))
#define ${MODULE_PREFIX}_${CLASS_NAME}_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${FullClassName}Class))
:> else
#define TYPE_${CLASS_NAME}            (${class_prefix}_get_type ())
#define ${CLASS_NAME}(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_${CLASS_NAME}, ${ClassName}))
#define IS_${CLASS_NAME}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_${CLASS_NAME}))
#define ${CLASS_NAME}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_${CLASS_NAME}, ${ClassName}Class))
#define IS_${CLASS_NAME}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_${CLASS_NAME}))
#define ${CLASS_NAME}_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_${CLASS_NAME}, ${ClassName}Class))
:> endif

typedef struct _${FullClassName}      ${FullClassName};
typedef struct _${FullClassName}Class ${FullClassName}Class;

struct _${FullClassName}
{

	:> if [ is_empty(class.super_class) ] then begin
	GObject super;
	:> else
	${type_name(class.super_class)} super;
	:> endif

  	/* instance members */

};

struct _${FullClassName}Class
{

	:> if [ is_empty(class.super_class) ] then begin
  	GObjectClass super_class;
  	:> else
  	${type_name(class.super_class)}Class super;
  	:> endif

  	/* class members */
  	
};

GType 
${class_prefix}_get_type (void);
 
 :> define suppress_param_names = FALSE
 :> define insert_line_breaks = TRUE
 :> define indent_level = 1
 :> for each method in class.methods where method.visibility == PUBLIC do
 	:> if [ isFirst ] then begin
/*
 * Public methods
 */
 	
 	:> endif	
${method_result(method)}
${class_prefix}_${method.name} (${method_signature(class, method, suppress_param_names, insert_line_breaks, indent_level)});   	

  :> done

:> if [ not is_empty(class.module) ] then begin
#endif /* __${MODULE_PREFIX}_${CLASS_NAME}_H__ */
:> else
#endif /* __${CLASS_NAME}_H__ */
:> endif
