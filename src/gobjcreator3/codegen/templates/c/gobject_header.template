/*
 * ...Copyright/Licensing information...
 */

:> if [ has_module ] then begin
#ifndef __${MODULE_PREFIX}_${CLASS_NAME}_H__
#define __${MODULE_PREFIX}_${CLASS_NAME}_H__
:> else
#ifndef __${CLASS_NAME}_H__
#define __${CLASS_NAME}_H__
:> endif

#include <glib-object.h>

:> if [ has_module ] then begin
#define ${MODULE_PREFIX}_TYPE_${CLASS_NAME}            (${module_prefix}_${class_prefix}_get_type ())
#define ${MODULE_PREFIX}_${CLASS_NAME}(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${ModulePrefix}${ClassName}))
#define ${MODULE_PREFIX}_IS_${CLASS_NAME}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}))
#define ${MODULE_PREFIX}_${CLASS_NAME}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${ModulePrefix}${ClassName}Class))
#define ${MODULE_PREFIX}_IS_${CLASS_NAME}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}))
#define ${MODULE_PREFIX}_${CLASS_NAME}_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), ${MODULE_PREFIX}_TYPE_${CLASS_NAME}, ${ModulePrefix}${ClassName}Class))

typedef struct _${ModulePrefix}${ClassName}      ${ModulePrefix}${ClassName};
typedef struct _${ModulePrefix}${ClassName}Class ${ModulePrefix}${ClassName}Class;

:> else
#define TYPE_${CLASS_NAME}            (${class_prefix}_get_type ())
#define ${CLASS_NAME}(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_${CLASS_NAME}, ${ClassName}))
#define IS_${CLASS_NAME}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_${CLASS_NAME}))
#define ${CLASS_NAME}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_${CLASS_NAME}, ${ClassName}Class))
#define IS_${CLASS_NAME}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_${CLASS_NAME}))
#define ${CLASS_NAME}_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_${CLASS_NAME}, ${ClassName}Class))

typedef struct _${ClassName}      ${ClassName};
typedef struct _${ClassName}Class ${ClassName}Class;
:> endif

:> if [ has_module ] then begin
struct _${ModulePrefix}${ClassName}
:> else
struct _${ClassName}
:> endif
{

	GObject super;

  	/* instance members */

};

:> if [ has_module ] then begin
struct _${ModulePrefix}${ClassName}Class
:> else
struct _${ClassName}Class
:> endif
{

  	GObjectClass super_class;

  	/* class members */
  	
};

:> if [ has_module ] then begin
GType ${module_prefix}_${class_prefix}_get_type (void);
:> else
GType ${class_prefix}_get_type (void);
:> endif

/*
 * Method definitions.
 */
 
 :> for each method in class.methods where method.visibility == PUBLIC do
 	:> if [ has_module ] then begin
${module_prefix}_${class_prefix}_${method.name}(); 	
 	:> else
${class_prefix}_${method.name}(); 	
 	:> endif 
 	
  :> done

:> if [ has_module ] then begin
#endif /* __${MODULE_PREFIX}_${CLASS_NAME}_H__ */
:> else
#endif /* __${CLASS_NAME}_H__ */
:> endif
