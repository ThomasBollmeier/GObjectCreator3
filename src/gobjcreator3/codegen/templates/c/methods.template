:> include "introspection.template"
:> snippet method_implementation(class, prefix, method_info)

	:> define method = method_info[0]
	:> define intf = method_info[1]
	:> define basename = method_basename(class, method_info)
	
	:> if [ is_empty(intf) ] then begin
		:> define clif = method_def_class(class, method.name)
	:> else
		:> define clif = intf
	:> endif
	
	:> if [ method.visibility == PRIVATE or not method.is_final ] then begin
static ${method_result(method)}
	:> else
		:> if [ method.is_final ] then begin
:> paste snippet method_introspection(method, class)
		:> endif
${method_result(method)}
	:> endif	
	:> if [ not method.is_final ] then begin
${prefix}_${basename}_im (${method_signature(clif, method, FALSE, TRUE, 1)})
	:> else	
${prefix}_${basename} (${method_signature(clif, method, FALSE, TRUE, 1)})	
	:> endif
{		
	:> edit-section basename begin
	/* add your method implementation here...*/
	:> endedit
}

:> endsnippet

:> snippet method_virtual (class, prefix, method_info)

	:> define method = method_info[0]
	:> define intf = method_info[1]
	:> define basename = method_basename(class, method_info)
	:> define defcls = method_def_class(class, method.name, intf)

	:> if [ is_empty(intf) ] then begin
		:> define clif = defcls
	:> else
		:> define clif = intf
	:> endif
	
	:> if [ is_empty(intf) ] then begin
:> paste snippet method_introspection(method, class)
${method_result(method)}	
	:> else
static ${method_result(method)}
	:> endif
${prefix}_${basename} (${method_signature(clif, method, FALSE, TRUE, 1)})
{
	${type_name(defcls)}Class *klass = ${CAST_MACRO(defcls)}_GET_CLASS (self);
	
	g_assert (klass->${basename} != NULL);
	
	:> if [ not method.returns_result() ] then begin
	klass->${basename} (${method_call_args(method, TRUE, 2)});
	:> else
	return klass->${basename} (${method_call_args(method, TRUE, 2)});
	:> endif
	
}

:> endsnippet

:> snippet method_overridden(class, prefix, override_info)

	:> define method_name = override_info[0]
	:> define intf = override_info[1]
	:> define method = method_by_name(class, method_name, intf)
	:> define basename = method_basename(class, override_info)
	
	:> if [ is_empty(intf) ] then begin
		:> define clif = method_def_class(class, method_name)
	:> else
		:> define clif = intf
	:> endif
	
static ${method_result(method)}
${prefix}_${basename}_im (${method_signature(clif, method, FALSE, TRUE, 1)})
{		
	:> edit-section basename begin
	/* add your method implementation here...*/
	:> endedit
}

:> endsnippet

:> snippet method_interface(intf, prefix, method)

	:> define section_name = method.name
	
:> paste snippet method_introspection(method, intf)
${method_result(method)}
${prefix}_${method.name} (${method_signature(intf, method, FALSE, TRUE, 1)})
{
	
	${type_name(intf)}Interface *intfClass = ${CAST_MACRO(intf)}_GET_INTERFACE (self);
	
	g_assert (intfClass->${method.name} != NULL);
	
	:> if [ not method.returns_result() ] then begin
	intfClass->${method.name} (${method_call_args(method, TRUE, 2)});
	:> else
	return intfClass->${method.name} (${method_call_args(method, TRUE, 2)});
	:> endif
	
}

:> endsnippet
