/*
 * ...Copyright/Licensing information...
 */
 
:> if [ not is_empty(class.module) ] then begin
#ifndef __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__
#define __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__
:> else
#ifndef __${CLASS_NAME}_PROT_H__
#define __${CLASS_NAME}_PROT_H__
:> endif

#include "${filename_wo_suffix(class)}.h"
:> if [ not is_empty(class.super_class) ] then begin
#include "${protected_header(class.super_class)}"
:> endif

G_BEGIN_DECLS

:> edit-section 'top' begin
/* insert further includes here... */
:> endedit

:> define hasProtAttrs = FALSE
:> define hasProtClassAttrs = FALSE
:> for each a in class.get_attributes() do
	:> case a.visibility in
	:> PROTECTED)
		:> if [ not a.is_static ] then begin
			:> hasProtAttrs = TRUE
		:> else
			:> hasProtClassAttrs = TRUE
		:> endif
	:> endcase
:> done

:> if [ hasProtAttrs ] then begin
struct _${FullClassName}Protected  
{
:> for each attr in class.get_attributes() where \
	attr.visibility == PROTECTED and \
	attr.is_static == FALSE \
	do
	${rearrange_asterisk(type_name(attr.type, TRUE), attr.name)};
:> done
};
:> endif

:> if [ hasProtClassAttrs ] then begin
struct _${FullClassName}ClsProtected 
{
:> for each attr in class.get_attributes() where \
	attr.visibility == PROTECTED and \
	attr.is_static == TRUE \
	do
	${rearrange_asterisk(type_name(attr.type, TRUE), attr.name)};
:> done
}
:> endif

:> define suppress_param_names = FALSE
:> define insert_line_breaks = TRUE
:> define indent_level = 1
 
:> for each method in class.methods where method.visibility == PROTECTED do
	:> if [ isFirst ] then begin
/*
 * protected methods:
 */
 	
 	:> endif	
${method_result(method)}
${class_prefix}_${method.name} (${method_signature(class, method, suppress_param_names, insert_line_breaks, indent_level)});   	

:> done

G_END_DECLS

:> if [ not is_empty(class.module) ] then begin
#endif /* __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__ */
:> else
#endif /* __${CLASS_NAME}_PROT_H__ */
:> endif
