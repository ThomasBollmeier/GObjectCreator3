${header_comment}
:> include "structures.template"
 
:> if [ not is_empty(class.module) ] then begin
#ifndef __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__
#define __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__
:> else
#ifndef __${CLASS_NAME}_PROT_H__
#define __${CLASS_NAME}_PROT_H__
:> endif

#include "${filename_wo_suffix(class)}.h"
:> if [ not is_empty(class.super_class) ] then begin
#include "${protected_header(class.super_class)}"
:> endif

G_BEGIN_DECLS

:> edit-section 'top' begin
/* insert further includes here... */
:> endedit

:> define hasProtAttrs = FALSE
:> define hasProtClassAttrs = FALSE
:> for each a in class.get_attributes() do
	:> case a.visibility in
	:> PROTECTED)
		:> if [ not a.is_static ] then begin
			:> hasProtAttrs = TRUE
		:> else
			:> hasProtClassAttrs = TRUE
		:> endif
	:> endcase
:> done

:> if [ hasProtAttrs ] then begin
	:> paste snippet structure_def (FullClassName, class.get_attributes(), FALSE, PROTECTED)
:> endif

:> if [ hasProtClassAttrs ] then begin
	:> paste snippet structure_def (FullClassName, class.get_attributes(), TRUE, PROTECTED)
:> endif

:> define supress_param_names = FALSE
:> define insert_line_breaks = TRUE
:> define indent_level = 1

:> if [ not class.is_final and not is_empty(class.constructor) ] then begin
	:> define cparams = class.constructor.parameters 
	:> case length(cparams) in
		:> 1)
void
${class_prefix}_initialize_ (${FullClassName} *self);
		:> 2)
void
${class_prefix}_initialize_ (
	${FullClassName} *self, 
	${method_signature(class, class.constructor, supress_param_names, insert_line_breaks, indent_level)}
	);	
		:> *)		
void
${class_prefix}_initialize_ (
	${FullClassName} *self, ${method_signature(class, class.constructor, supress_param_names, insert_line_breaks, indent_level)});	
	:> endcase
:> endif
 
:> define first = TRUE
:> for each method_info in class.methods do

	:> define method = method_info[0]
	:> if [ method.visibility == PROTECTED ] then begin
	
		:> if [ first ] then begin
/*
 * protected methods:
 */
 		:> endif
 		
${method_result(method)}
${class_prefix}_${method.name} (${method_signature(class, method, supress_param_names, insert_line_breaks, indent_level)});

	:> endif   	

:> done

:> edit-section 'bottom' begin
/* insert further definitions here... */
:> endedit

G_END_DECLS

:> if [ not is_empty(class.module) ] then begin
#endif /* __${MODULE_PREFIX}_${CLASS_NAME}_PROT_H__ */
:> else
#endif /* __${CLASS_NAME}_PROT_H__ */
:> endif
