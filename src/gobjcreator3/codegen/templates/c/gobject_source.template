${header_comment}
:> include "structures.template"
:> include "properties.template"
:> include "signals.template"
:> include "methods.template"
:> include "interfaces.template"
:> if [ class.has_protected_members() or not class.is_final ] then begin
#include "${protected_header(class)}"
:> else
#include "${filename_wo_suffix(class)}.h"
	:> if [ not is_empty(class.super_class) ] then begin
#include "${protected_header(class.super_class)}"
	:> endif
:> endif
:> if [ class.has_signals() ] then begin
#include "${marshaller_header(class)}"
#include <stdarg.h>
:> endif

:> edit-section 'source-top' begin
/* ... */
:> endedit

:> define supress_param_names = FALSE
:> define insert_line_breaks = TRUE
:> define indent_level = 1

:> define hasPrivAttrs = FALSE
:> define hasPrivClassAttrs = FALSE
:> define hasProtAttrs = FALSE
:> define hasProtClassAttrs = FALSE

:> for each a in class.get_attributes() do
	:> case a.visibility in
	:> PRIVATE)
		:> if [ not a.is_static ] then begin
			:> hasPrivAttrs = TRUE
		:> else
			:> hasPrivClassAttrs = TRUE
		:> endif
	:> PROTECTED)
		:> if [ not a.is_static ] then begin
			:> hasProtAttrs = TRUE
		:> else
			:> hasProtClassAttrs = TRUE
		:> endif
	:> endcase
:> done

:> if [ hasPrivAttrs ] then begin

	:> paste snippet structure_def (FullClassName, class.get_attributes(), FALSE, PRIVATE)

# define ${CAST_MACRO(class)}_GET_PRIVATE(obj) \
	(G_TYPE_INSTANCE_GET_PRIVATE ((obj), ${TYPE_MACRO(class)}, ${FullClassName}Private))

:> endif

:> if [ hasPrivClassAttrs ] then begin
	:> paste snippet structure_def (FullClassName, class.get_attributes(), TRUE, PRIVATE)
:> endif

/* 
 * Global variables to access current class and its parent. 
 * Will be set in class_init. 
 */ 
static ${FullClassName}Class *${class_prefix}_class = NULL;
static GObjectClass *${class_prefix}_parent_class = NULL; 

:> for each method_info in class.methods where method_info[0].visibility == PRIVATE do
	:> if [ isFirst ] then begin
/* 
 * private methods (declaration):
 */
 
 	:> endif
 	:> define method = method_info[0]
static ${method_result(method)}
${class_prefix}_${method.name} (${method_signature(class, method, supress_param_names, insert_line_breaks, indent_level)});

:> done

:> edit-section 'source-after-typedecl' begin
/* ... */
:> endedit

:> if [ not is_empty(class.methods) ] then begin

/* == implementation of methods == */

	:> for each method_info in class.methods do
		
		:> define meth = method_info[0]
		:> define intf = method_info[1]
		
		:> if [ not is_empty(intf) or not meth.is_abstract ] then begin
			:> paste snippet method_implementation(class, class_prefix, method_info)
		:> endif
		
		:> if [ not is_empty(intf) or not meth.is_final ] then begin
			:> paste snippet method_virtual(class, class_prefix, method_info)
		:> endif
		
	:> done
	
:> endif

:> paste snippet interface_initialization (class, class_prefix)

:> for each override in class.overridden do

	:> if [ isFirst ] then begin
/* implementation of overridden methods */
	:> endif

	:> paste snippet method_overridden(class, class_prefix, override)

:> done

:> if [ is_prop_init_required(class) ] then begin
	:> paste snippet prop_set_get_decl (class_prefix, class.get_properties())
:> endif

:> if [ class.has_signals() ] then begin
	:> paste snippet signal_def_and_handlers (class_prefix, class, class.get_signals())
:> endif

:> if [ config.generate_base_functions ] then begin

static void 
${class_prefix}_base_init (gpointer klass)
{

	:> edit-section 'base-init' begin
	/* Add custom base initialization code ... */
	:> endedit

}

static void 
${class_prefix}_base_finalize (gpointer klass)
{

	:> edit-section 'base-finalize' begin
	/* Add custom base finalization code ... */
	:> endedit

}

:> endif

:> if [ config.generate_constructor ] then begin

static GObject *
${class_prefix}_constructor (
	GType gtype,
	guint num_properties,
	GObjectConstructParam *properties
	);
	
:> endif
	
static void
${class_prefix}_dispose (GObject* obj);

static void
${class_prefix}_finalize (GObject* obj);

static void                
${class_prefix}_class_init (
	gpointer klass,
	gpointer class_data
	)
{

	GObjectClass *gobj_class;
	:> if [ class.has_signals() ] then begin
	GClosure *default_closure;
	:> endif

	/* set global pointers to class and its parent: */ 
:> if [ not is_empty(MODULE_PREFIX) ] then begin
	${class_prefix}_class = ${MODULE_PREFIX}_${CLASS_NAME}_CLASS (klass);
:> else
	${class_prefix}_class = ${CLASS_NAME}_CLASS (klass);
:> endif
	${class_prefix}_parent_class = g_type_class_peek_parent (${class_prefix}_class);
	gobj_class = G_OBJECT_CLASS (${class_prefix}_class);
	
:> if [ hasProtClassAttrs ] then begin
	${class_prefix}_class->prot = g_new (${FullClassName}ClsProtected, 1);
:> endif	
:> if [ hasPrivClassAttrs ] then begin
	${class_prefix}_class->priv = g_new (${FullClassName}ClsPrivate, 1);
:> endif	
	
:> if [ config.generate_constructor ] then begin
	gobj_class->constructor = ${class_prefix}_constructor;
:> endif	
	gobj_class->dispose = ${class_prefix}_dispose;
	gobj_class->finalize = ${class_prefix}_finalize;

:> for each method_info in class.methods where not method_info[0].is_final do
	:> define method = method_info[0]
	:> define intf = method_info[1]
	:> if [ isFirst ] then begin
	/* default implementations for non-final methods: */
	:> endif
	:> define basename = method_basename(class, method_info)
	:> if [ not method.is_abstract or not is_empty(intf) ] then begin
	${class_prefix}_class->${basename} = ${class_prefix}_${basename}_im;
	:> else
	${class_prefix}_class->${basename} = NULL;
	:> endif
:> done 
	
:> for each override in class.overridden do
	:> if [ isFirst ] then begin
	/* register overridden methods: */
	:> endif
	:> define method_name = override[0]
	:> define intf = override[1]
	:> define defcls = method_def_class(class, method_name, intf)
	:> define orig_basename = method_basename(defcls, override)
	:> define basename = method_basename(class, override)
	${method_def_class_cast(class, method_name, intf)} (klass)->${orig_basename} = ${class_prefix}_${basename}_im;
:> done
	
:> if [ hasPrivAttrs ] then begin
	/* register structure that contains private attributes: */
	g_type_class_add_private (klass, sizeof (${FullClassName}Private));
:> endif

:> if [ is_prop_init_required(class) ] then begin
	:> paste snippet prop_class_init(class_prefix, class.get_properties()) indent by 1
:> endif

:> if [ class.has_signals() ] then begin
	:> paste snippet signal_registration (class_prefix, class.get_signals()) indent by 1
:> endif

	:> edit-section 'class-init' begin
	/* Add custom class initialization code ... */
	:> endedit

}

static void
${class_prefix}_instance_init (
	GTypeInstance *instance,
	gpointer klass)
{

:> if [ hasProtAttrs or hasPrivAttrs ] then begin
	${FullClassName} *self = ${CAST_MACRO(class)} (instance);
:> endif
	
:> if [ hasProtAttrs ] then begin
	self->prot = g_new (${FullClassName}Protected, 1);
:> endif
:> if [ hasPrivAttrs ] then begin
	self->priv = ${CAST_MACRO(class)}_GET_PRIVATE (self);
:> endif

	:> edit-section 'instance-init' begin
	/* Add custom instance initialization code ... */
	:> endedit

}

:> if [ config.generate_constructor ] then begin

GObject *
${class_prefix}_constructor (
	GType gtype,
	guint num_properties,
	GObjectConstructParam *properties
	) 
{

	/* call parent's constructor first: */ 
	GObject *new_obj = G_OBJECT_CLASS (${class_prefix}_parent_class)->constructor (
		gtype, 
		num_properties,
		properties);

	:> edit-section 'constructor' begin
	/* Add custom constructor code ... */
	:> endedit

	return new_obj;

}

:> endif

GType 
${class_prefix}_get_type (void) 
{
	static GType type = 0;
	
	if (type == 0) 
	{
		const GTypeInfo type_info = {
	   		sizeof (${FullClassName}Class),
	   		:> if [ config.generate_base_functions ] then begin
	   		(GBaseInitFunc) ${class_prefix}_base_init,
	   		(GBaseFinalizeFunc) ${class_prefix}_base_finalize,
	   		:> else
	   		NULL, /* base init */
	   		NULL, /* base finalize */
	   		:> endif
	   		(GClassInitFunc) ${class_prefix}_class_init,
	   		NULL, /* class finalize */
	   		NULL, /* class_data */
	   		sizeof (${FullClassName}),
	   		0, /* n_preallocs */
	   		(GInstanceInitFunc) ${class_prefix}_instance_init
	   		};
    		
		:> if [ is_empty(class.super_class) ] then begin
		type = g_type_register_static (G_TYPE_OBJECT,
		:> else
		type = g_type_register_static (${TYPE_MACRO(class.super_class)},
		:> endif
			"${FullClassName}",
			&type_info,
			:> if [ class.is_abstract ] then begin
			G_TYPE_FLAG_ABSTRACT);
			:> else
			0);	
			:> endif
			
		:> paste snippet interface_registration (class, class_prefix, 'type') indent by 2
		
	}

	return type;
}

:> if [ not class.is_abstract ] then begin
/* 
 * constructor: 
 */
${FullClassName} *
	:> if [ not is_empty(class.constructor) ] then begin
${class_prefix}_new (${method_signature(class, class.constructor, supress_param_names, insert_line_breaks, indent_level)})
	:> else
${class_prefix}_new (void)
	:> endif
{

	${FullClassName} *new_instance = NULL;
	
	:> define constructor = class.constructor
	:> define doneConstructor = FALSE
	
	:> if [ not is_empty(constructor) ] then begin
		:> for each param in constructor.parameters where \
			not is_empty(param.bind_to_property) \
			do
			:> if [isFirst] then begin
	new_instance = ${CAST_MACRO(class)} (g_object_new (${TYPE_MACRO(class)},
				:> doneConstructor = TRUE
			:> endif
		"${param.bind_to_property}", ${param.name},
		:> done
		:> for each prop_init in constructor.prop_inits do
			:> if [isFirst and not doneConstructor] then begin
	new_instance = ${CAST_MACRO(class)} (g_object_new (${TYPE_MACRO(class)},
				:> doneConstructor = TRUE
			:> endif
		"${prop_init.name}", ${prop_value(prop_init.value)},
		:> done
	:> endif
	:> if [doneConstructor] then begin
		NULL));
	:> else
	new_instance = ${CAST_MACRO(class)} (g_object_new (${TYPE_MACRO(class)}, NULL));
	:> endif
	
	:> edit-section 'new' begin
	/* your instance initialization code ... */
	:> endedit
	
	return new_instance;

}
:> endif

:> if [ not class.is_final and not is_empty(class.constructor) ] then begin

	:> define cparams = class.constructor.parameters 
	:> case length(cparams) in
		:> 1)
void
${class_prefix}_initialize_ (${FullClassName} *self)
		:> 2)
void
${class_prefix}_initialize_ (
	${FullClassName} *self, 
	${method_signature(class, class.constructor, supress_param_names, insert_line_breaks, indent_level)}
	)
		:> *)		
void
${class_prefix}_initialize_ (
	${FullClassName} *self, ${method_signature(class, class.constructor, supress_param_names, insert_line_breaks, indent_level)})	
	:> endcase
{
	:> edit-section 'initialize_' begin
	/* initialize ... */
	:> endedit
}
:> endif

static void
${class_prefix}_dispose (GObject* obj) 
{
	:> edit-section 'dispose' begin
	/* 
	 * In dispose, you are supposed to free all types referenced from this
 	 * object which might themselves hold a reference to self. Generally,
 	 * the most simple solution is to unref all members on which you own a 
 	 * reference.
 	 */	
	:> endedit
	
	/* chain up to super class: */
	${class_prefix}_parent_class->dispose (obj);

}

static void
${class_prefix}_finalize (GObject* obj)
{
	:> edit-section 'finalize' begin
	/* Free allocated memory here ... */
	:> endedit
	
:> if [ hasProtAttrs ] then begin
	g_free (${CAST_MACRO(class)} (obj)->prot);
:> endif 

	/* chain up to super class: */
	${class_prefix}_parent_class->finalize (obj);

}

:> if [ is_prop_init_required(class) ] then begin
	:> paste snippet prop_set_get_impl(class_prefix, class.get_properties(), 'Class', FullClassName)
	:> if [ config.generate_setter_getter ] then begin
		:> paste snippet prop_setters_getters(class, class_prefix, FALSE)
	:> endif
:> endif

:> edit-section 'source-bottom' begin
/* ... */
:> endedit