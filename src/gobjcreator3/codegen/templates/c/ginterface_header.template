${header_comment}
 
:> if [ not is_empty(intf.module) ] then begin
#ifndef __${MODULE_PREFIX}_${INTF_NAME}_H__
#define __${MODULE_PREFIX}_${INTF_NAME}_H__
:> else
#ifndef __${INTF_NAME}_H__
#define __${INTF_NAME}_H__
:> endif

#include <glib-object.h>

G_BEGIN_DECLS

:> edit-section 'top' begin
/* insert further includes here... */
:> endedit

:> if [ not is_empty(intf.module) ] then begin
#define ${MODULE_PREFIX}_TYPE_${INTF_NAME} \
	(${intf_prefix}_get_type ())
#define ${MODULE_PREFIX}_${INTF_NAME}(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST ((obj), ${MODULE_PREFIX}_TYPE_${INTF_NAME}, ${type_name(intf)}))
#define ${MODULE_PREFIX}_IS_${INTF_NAME}(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${MODULE_PREFIX}_TYPE_${INTF_NAME}))
#define ${MODULE_PREFIX}_${INTF_NAME}_GET_INTERFACE(obj) \
	(G_TYPE_INSTANCE_GET_INTERFACE ((obj), ${MODULE_PREFIX}_TYPE_${INTF_NAME}, ${type_name(intf)}Interface))
:> else
#define TYPE_${INTF_NAME} \
	(${intf_prefix}_get_type ())
#define ${INTF_NAME}(obj) \
	(G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_${INTF_NAME}, ${type_name(intf)}))
#define IS_${INTF_NAME}(obj) \
	(G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_${INTF_NAME}))
#define ${INTF_NAME}_GET_INTERFACE(obj) \
	(G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_${INTF_NAME}, ${type_name(intf)}Interface))
:> endif

typedef struct _${type_name(intf)}          ${type_name(intf)}; /* dummy object */
typedef struct _${type_name(intf)}Interface ${type_name(intf)}Interface;

struct _${type_name(intf)}Interface
{
	GTypeInterface super;

	:> for each method in intf.methods do
		:> if [ isFirst ] then begin
	/* == methods == */
	
		:> endif
	${method_result(method)} 
	(*${method.name}) (${method_signature(intf, method, FALSE, TRUE, 2)});

	:> done

};

GType 
${intf_prefix}_get_type (void);

:> for each method in intf.methods do
${method_result(method)}
${intf_prefix}_${method.name} (${method_signature(intf, method, FALSE, TRUE, 1)});

:> done

G_END_DECLS

:> if [ not is_empty(intf.module) ] then begin
#endif /* __${MODULE_PREFIX}_${INTF_NAME}_H__ */
:> else
#endif /* __${INTF_NAME}_H__ */
:> endif
